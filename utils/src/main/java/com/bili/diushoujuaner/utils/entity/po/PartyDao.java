package com.bili.diushoujuaner.utils.entity.po;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.bili.diushoujuaner.utils.entity.po.Party;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PARTY".
*/
public class PartyDao extends AbstractDao<Party, Long> {

    public static final String TABLENAME = "PARTY";

    /**
     * Properties of entity Party.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PartyNo = new Property(1, long.class, "partyNo", false, "PARTY_NO");
        public final static Property PartyName = new Property(2, String.class, "partyName", false, "PARTY_NAME");
        public final static Property OwnerNo = new Property(3, long.class, "ownerNo", false, "OWNER_NO");
        public final static Property Information = new Property(4, String.class, "information", false, "INFORMATION");
        public final static Property RegisterTime = new Property(5, String.class, "registerTime", false, "REGISTER_TIME");
        public final static Property PicPath = new Property(6, String.class, "picPath", false, "PIC_PATH");
    };


    public PartyDao(DaoConfig config) {
        super(config);
    }
    
    public PartyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PARTY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PARTY_NO\" INTEGER NOT NULL ," + // 1: partyNo
                "\"PARTY_NAME\" TEXT NOT NULL ," + // 2: partyName
                "\"OWNER_NO\" INTEGER NOT NULL ," + // 3: ownerNo
                "\"INFORMATION\" TEXT," + // 4: information
                "\"REGISTER_TIME\" TEXT NOT NULL ," + // 5: registerTime
                "\"PIC_PATH\" TEXT NOT NULL );"); // 6: picPath
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PARTY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Party entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPartyNo());
        stmt.bindString(3, entity.getPartyName());
        stmt.bindLong(4, entity.getOwnerNo());
 
        String information = entity.getInformation();
        if (information != null) {
            stmt.bindString(5, information);
        }
        stmt.bindString(6, entity.getRegisterTime());
        stmt.bindString(7, entity.getPicPath());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Party readEntity(Cursor cursor, int offset) {
        Party entity = new Party( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // partyNo
            cursor.getString(offset + 2), // partyName
            cursor.getLong(offset + 3), // ownerNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // information
            cursor.getString(offset + 5), // registerTime
            cursor.getString(offset + 6) // picPath
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Party entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPartyNo(cursor.getLong(offset + 1));
        entity.setPartyName(cursor.getString(offset + 2));
        entity.setOwnerNo(cursor.getLong(offset + 3));
        entity.setInformation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRegisterTime(cursor.getString(offset + 5));
        entity.setPicPath(cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Party entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Party entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
