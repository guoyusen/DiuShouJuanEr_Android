package com.bili.diushoujuaner.utils.entity.po;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.bili.diushoujuaner.utils.entity.po.Apply;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APPLY".
*/
public class ApplyDao extends AbstractDao<Apply, Long> {

    public static final String TABLENAME = "APPLY";

    /**
     * Properties of entity Apply.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OwnerNo = new Property(1, long.class, "ownerNo", false, "OWNER_NO");
        public final static Property FromNo = new Property(2, long.class, "fromNo", false, "FROM_NO");
        public final static Property ToNo = new Property(3, long.class, "toNo", false, "TO_NO");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Time = new Property(5, String.class, "time", false, "TIME");
        public final static Property Type = new Property(6, Integer.class, "type", false, "TYPE");
        public final static Property Read = new Property(7, Boolean.class, "read", false, "READ");
        public final static Property Accept = new Property(8, Boolean.class, "accept", false, "ACCEPT");
    };


    public ApplyDao(DaoConfig config) {
        super(config);
    }
    
    public ApplyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APPLY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"OWNER_NO\" INTEGER NOT NULL ," + // 1: ownerNo
                "\"FROM_NO\" INTEGER NOT NULL ," + // 2: fromNo
                "\"TO_NO\" INTEGER NOT NULL ," + // 3: toNo
                "\"CONTENT\" TEXT," + // 4: content
                "\"TIME\" TEXT," + // 5: time
                "\"TYPE\" INTEGER," + // 6: type
                "\"READ\" INTEGER," + // 7: read
                "\"ACCEPT\" INTEGER);"); // 8: accept
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APPLY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Apply entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOwnerNo());
        stmt.bindLong(3, entity.getFromNo());
        stmt.bindLong(4, entity.getToNo());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(7, type);
        }
 
        Boolean read = entity.getRead();
        if (read != null) {
            stmt.bindLong(8, read ? 1L: 0L);
        }
 
        Boolean accept = entity.getAccept();
        if (accept != null) {
            stmt.bindLong(9, accept ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Apply readEntity(Cursor cursor, int offset) {
        Apply entity = new Apply( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // ownerNo
            cursor.getLong(offset + 2), // fromNo
            cursor.getLong(offset + 3), // toNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // time
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // read
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0 // accept
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Apply entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOwnerNo(cursor.getLong(offset + 1));
        entity.setFromNo(cursor.getLong(offset + 2));
        entity.setToNo(cursor.getLong(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setRead(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setAccept(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Apply entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Apply entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
